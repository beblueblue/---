0、首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。
版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。
而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。
不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。

1、创建空目录
$ mkdir learngit  //新建文件夹
$ cd learngit  //进入指定文件夹
$ pwd       //显示当前目录

2、目录变成可管理的仓库（初始化）
$ git init

3、添加文件到仓库
$ git add <file>   //可一次性添加多个文件，实质上是将工作区添加到缓存区

4、提交文件到仓库
$ git commit    //可一次性提交多个文件,实质上是将缓存区提交到版本库
$ git commit -m "wrote a readme file"  //-m后面输入的是本次提交的说明

5、查看仓库当前状态
$ git status

6、查看具体修改内容
$ git diff

7、查看提交历史
$ git log

8、查看命令历史
$ git reflog

9、版本更改命令
$ git reset --hard HEAD^     //HEAD表示当前版本，上一个版本是HEAD^,上一百个版本是HEAD~100
$ git reset --hard <commit_id>  //通过git log或git reflog查看commit_id

10、查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- readme.txt 

11、撤销修改
$ git checkout -- <file>  //丢弃工作区的修改  --很重要，没有--，就变成了“切换到另一个分支”的分支管理命令
$ git reset HEAD <file>  //可以撤销缓存区的修改，重新放到工作区 

12、删除文件
$ rm <file>  //工作区删除文件命令,误删利用git checkout -- <file>恢复
$ git rm <file>  //删除版本库中的文件，并且git commit

13、建立gitHub远程仓库
	1、SSH协议方式：
		1、创建SSH Key
		$ ssh-keygen -t rsa -C "yourmail@examle.com"  //在.ssh目录下，生产id_rsa私钥和id_rsa.pub公钥
		2、登录GitHub,打开“Settings”，“SSH Keys”页面添加公钥
		3、“Create a new repo"创建一个新的仓库，关联本地仓库
		$ git remote add origin git@github.com:beblueblue/learngit.git  //beblueblue是GitHub帐号名，origin是git远程库的默认叫法
		4、把本地库的所有内容推送到远程库git push
		$ git push -u origin master
		$ git push origin master
	2、Https协议方式
		1、建立Http连接
		$ git remote add origin https://github.com/beblueblue/learngit.git
		2、把本地库的所有内容推送到远程库git push
		$ git push -u origin master
		$ git push origin master

14、解除远程仓库绑定
$ git remote rm origin

15、克隆GitHub远程库
$ git clone git@github.com:beblueblue/learngit.git  //SSH协议方式
$ git clone https://github.com/beblueblue/learngit.git  //Https协议方式

16、GitHub远程库同步到本地
	查看远程仓库命令
	$ git remote -v
	
	同步方式一：从远程获取最新版本但不合并
	$ git fetch origin master  //获取最新版本
	$ git log -p master..origin/master  //比较本地仓库和远程仓库的不同
	$ git merge origin/master
	
	同步方式二：从远程库直接同步到本地，实质上是fetch+merge
	$ git pull

17、查看文件及目录命令
$ cat <file>  //显示文件内容
$ ls    //显示当前目录的内容

18、创建分支、切换分支命令
	方式一：创建并切换
	$ git checkout -b dev  //创建并切换到dev分支
	方式二：先创建分支，在切换至分支
	$ git branch dev  //创建分支
	$ git checkout dev  //切换分支
	
19、查看当前分支命令
$ git branch  //列出全部分支，当前分支前面带有*号标志

20、合并分支命令
$ git merge dev  //在当前分支下合并dev分支

21、删除分支命令
$ git branch -d dev

22、冲突解决
	若当前分支和需合并分支都分别有了新的提交（commit），就产生了冲突。
	Git用<<<<<<<,=======,>>>>>>>标记出不同分支的内容。
	修改内容后，重新添加(add)和提交(commit)。
	
23、查看分支的合并情况
$ git log --graph  //查看分支合并图
$ git log --graph --pretty=oneline --abbrev-commit  //--abbrev-commit 仅显示SHA-1的前几个字符，而非全部的40个字符 --pretty=oneline 一行显示

	
