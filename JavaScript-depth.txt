1、运算符
	1.1特殊运算符：
	条件运算符：c?a:b  //c为true，表达式值为a；c为false，表达式值为b。
	逗号运算符：var val = (1,2,3);  //val = 3, 逗号运算符会依次计算表达式，返回值为最后一个表达式的值
	delede 运算符：delete obj.x;  //删除对象的属性
		var obj = {x : 1};
		obj.x;  //1
		delete obj.x;
		obj,x;  //undefined
		注意：从IE9开始，利用Object.defineProperty的configuarable标签，可以阻止delete操作
		var obj = {};
		Object.defineProperty(obj,'x',{
			configurable : false,
			value : 1
		});
		delete obj.x;  //false
		obj.x;  //1
	in 运算符：prop in objectName;  //如果属性存在于对象，返回true
		使用delete删除，in运算符对所删属性返回false；
		如果属性只是赋值为undefined，没有delete操作，in运算仍返回true；
		如果属性是从原型链上继承而来，in运算符返回true。
	instanceof 运算符：object instanceof constructor;  
						//测试对象object的原型链上是否存在构造函数constructor.prototype的属性。
		function C(){};
		function D(){};
		
		var o = new C();
		o instanceof C;  //true，因为Object.getPrototypeOf(o)  === C.prototype的属性。
		o instanceof D;  //false，因为D.prototype不在o的原型链上
		
		o instanceof Object;  //true，因为Object.prototype.isPrototyoeOf(0)返回true
		C.prototype instanceof Object;  //true，同上
	typeof 运算符：typeof operand;  //判断运算符结果的类型
		Type 														Result
		Undefined 													"undefined"
		Null 														"object" 
		Boolean 													"boolean"
		Number 														"number"
		String 														"string"
		Symbol (new in ECMAScript 2015) 							"symbol"
		Host object (provided by the JS environment) 				Implementation-dependent
		Function object (implements [[Call]] in ECMA-262 terms) 	"function"
		Any other object 											"object"
	new 运算符：new constructor[([arguments])];  
			//创建一个用户定义的对象类型的实例或一个具有构造函数的内置对象类型
		可以利用hasOwnProperty方法来判断是对象的直接属性还是来自原型上的属性
		function Foo(){};
		Foo.prototype.x = 1;
		var obj = new Foo();
		obj.x;  //1
		
		obj.hasOwnProperty('x');  //false
		obj._prpto_.hasOwnProperty('x');  //true
	this 运算符：可以利用call和apply方法修改this指向。
		谁调用this，this指向谁。  //全局作用域下，this指向window
		ECMA标准规定，在strict模式下让函数的this指向undefind。
	void 运算符：void expression;  //计算表达式expression，但返回undefined
		<a href="javascript:void(0);">
			Click here to do nothing
		</a>

		<a href="javascript:void(document.body.style.backgroundColor='green');">
			Click here for green background
		</a>
2.语句
	2.1 block语句
	用花括号括起来的就是块语句block
	ES6中，可以用let声明块级作用域
	var x = 1;
	{
		var x = 2;
	}
	console.log(x);  //2
	
	let x = 1;
	{
		let x = 2;
	}
	console.log(x);  //1
	
	const x = 1;
	{
		const x = 2;
	}
	console.log(x);  //1	
	
	2.2 var语句
	误区：var a=b=1;  //b会隐式地定义成全局变量
	function foo(){
		var a = b =1;
	}
	foo();
	
	console.log(typeof a);  //'undefined'
	console.log(typeof b);  //'number'
	
	2.3 try...catch语句  //当我们用catch捕获错误时，一定要写处理语句！
	三种形式：
		//完整的try...catch...finally: 无论是否有异常，finally语句都会执行
		try{
			...
		} catch (e) {
			...
		} finally {
			...
		}
		//只有try...catch，没有finally:
		try{
			...
		} catch (e) {
			...
		}
		//只有try...finally，没有catch：
		try {
			...
		} finally {
			...
		}
	语句嵌套：
		//try语句发生嵌套，内部未捕获错误
		try {
			try {
				throw new Error("oops");
			}
			finally {
				console.log("finally");
			}
		}
		catch (e) {
			console.error("outer",e.message);
		}
		/*
			"finally"
			"outer oops"
		*/
		
		//try语句发生嵌套，内部捕获错误，错误只会被内部处理，外部无法捕获
		try {
			try {
				throw new Error("oops");
			}
			catch (e){
				console.error("inner", e.message);
			}
			finally {
				console.log("finally");
			}
		}
		catch (e) {
			console.error("outer",e.message);
		}
		/*
			"inner" "oops"
			"finally"
		*/
		
		//try语句发生嵌套，内部再次抛出异常
		try {
			try {
				throw new Error("oops");
			}
			catch (e){
				throw e;
				console.error("inner", e.message);  //此语句不会被处理
			}
			finally {
				console.log("finally");
			}
		}
		catch (e) {
			console.error("outer",e.message);
		}
		/*
			"outer" "oops"
		*/
		try {
			try {
				throw new Error("oops");
			}
			catch (e){
				console.error("inner", e.message);
				throw e;
			}
			finally {
				console.log("finally");
			}
		}
		catch (e) {
			console.error("outer",e.message);
		}
		/*	
			"inner" "oops"
			"finally"
			"outer" "oops"
		*/
	异步错误处理：
		涉及到异步代码，无法在调用时捕获，原因就是在捕获的当时，回调函数并未执行。
		//此时除了在printTime函数内部捕获错误外，外层代码并无法捕获。
		function printTime() {
			throw new Error();
		}

		try {
			setTimeout(printTime, 1000);
			console.log('done');
		} catch (e) {
			console.error('error');
		}
		/*
			done
		*/
	
	2.4 function 语句
	fd();  //true
	function fd(){...} //函数声明
	
	fe();  //TypeError
	var fe = function {...} //函数表达式
	函数声明被预处理，表达式则没有。还可以利用new创建函数对象。
	
	2.5 for...in 语句
	坑比较多！
		1.顺序不确定，具体的顺序依赖引擎的实现；
		2.对象的每个属性具有描述器，enumerable(可枚举)为false时，不会被遍历
		3.for...in对象属性时，受原型链影响（enumerable为true的话）。
	
	2.6 switch 语句
	条件分支语句：
		switch (val) {
			case1:
				//do something
				break;
			case2:
				//do something
			default:
				//do something
				break;
		}
		
	2.7 循环 语句
		while(isTrue) {
			//do sth.
		}
		
		do{
			//do sth.
		} while (isTrue)
		
		for (let i=0; i<n; i++) {
			//do sth.
		}
		
	2.8 with 语句
		不建议使用！strict模式下被禁用！ //让JS引擎优化更难；可读性差。
		利用定义变量的方式来代替with语句！
		
		with (document.form[0]){
			console.log(name.value);
		}
		
		var forms = document.forms[0];
		console.log(forms.name.value);
		